# -*- coding: utf-8 -*-
# =============================================================================
# Copyright (c) 2012, Lawrence Livermore National Security, LLC.
# Produced at the Lawrence Livermore National Laboratory.
# Written by Joel Bernier <bernier2@llnl.gov> and others.
# LLNL-CODE-529294.
# All rights reserved.
#
# This file is part of HEXRD. For details on dowloading the source,
# see the file COPYING.
#
# Please also see the file LICENSE.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the IMPLIED WARRANTY OF MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the terms and conditions of the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program (see file LICENSE); if not, write to
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA or visit <http://www.gnu.org/licenses/>.
# =============================================================================
import numpy as np
from scipy import constants as sc

# pi related
pi = np.pi
piby2 = 0.5 * pi
piby3 = pi / 3.
piby4 = 0.25 * pi
piby6 = pi / 6.

# misc radicals
sqrt2 = np.sqrt(2.)
sqrt3 = np.sqrt(3.)
sqrt3by2 = 0.5 * sqrt3

# tolerancing
epsf = np.finfo(float).eps      # ~2.2e-16
ten_epsf = 10 * epsf            # ~2.2e-15
sqrt_epsf = np.sqrt(epsf)       # ~1.5e-8

# for angles
period_dict = {'degrees': 360.0, 'radians': 2*pi}
angular_units = 'radians'  # module-level angle units
d2r = pi / 180.
r2d = 180. / pi

# identity arrays
identity_3x3 = np.eye(3)  # (3, 3) identity
identity_6x1 = np.r_[1., 1., 1., 0., 0., 0.]

# basis vectors
lab_x = np.r_[1., 0., 0.]  # X in the lab frame
lab_y = np.r_[0., 1., 0.]  # Y in the lab frame
lab_z = np.r_[0., 0., 1.]  # Z in the lab frame

zeros_3 = np.zeros(3)
zeros_3x1 = np.zeros((3, 1))
zeros_6x1 = np.zeros((6, 1))

# reference beam direction and eta=0 ref in LAB FRAME for standard geometry
beam_vec = -lab_z
eta_vec = lab_x

# for energy/wavelength conversions
def keVToAngstrom(x):
    return (1e7*sc.c*sc.h/sc.e) / np.array(x, dtype=float)


def _readenv(name, ctor, default):
    try:
        import os
        res = os.environ[name]
        del os
    except KeyError:
        del os
        return default
    else:
        try:
            return ctor(res)
        except:
            import warnings
            warnings.warn("environ %s defined but failed to parse '%s'" %
                          (name, res), RuntimeWarning)
            del warnings
            return default


# 0 = do NOT use numba
# 1 = use numba (default)
USE_NUMBA = _readenv("HEXRD_USE_NUMBA", int, 1)
if USE_NUMBA:
    try:
        import numba
    except ImportError:
        print("*** Numba not available, processing may run slower ***")
        USE_NUMBA = False

del _readenv


# some physical constants
cAvogadro      = 6.02214076E23
cBoltzmann     = 1.380649E-23
cCharge        = 1.602176634E-19
cJ2eV          = 1.602176565E-19
cLight         = 299792458.0
cMoment        = 9.2740100707E-24
cPermea        = 1.2566370616E-6
cPermit        = 8.8541878163E-12
cPlanck        = 6.62607015E-34
cRestmass      = 9.1093837090E-31

'''
adding another parametrization of the scattering factors. these are more recent
and more accurate. also used in Vesta (copied from there). see:

New Analytical coherent Scattering-Factor Functions for Free Atoms and Ions
BY D. WAASMAIER AND A. KIRFEL
Acta Cryst. (1995). A51,416-431
'''
scatfac = {
'H':[0.413048, 0.294953, 0.187491, 0.080701, 0.023736, 4.9e-05, 15.569946, 32.398468, 5.711404, 61.889874, 1.334118],
'He':[0.732354, 0.753896, 0.283819, 0.190003, 0.039139, 0.000487, 11.553918, 4.595831, 1.546299, 26.463964, 0.377523],
'Li':[0.974637, 0.158472, 0.811855, 0.262416, 0.790108, 0.002542, 4.334946, 0.342451, 97.102966, 201.363824, 1.409234],
'Be':[1.533712, 0.638283, 0.601052, 0.106139, 1.118414, 0.002511, 42.662078, 0.59542, 99.106501, 0.15134, 1.843093],
'B':[2.085185, 1.06458, 1.062788, 0.140515, 0.641784, 0.003823, 23.494069, 1.137894, 61.238975, 0.114886, 0.399036],
'C':[2.657506, 1.078079, 1.490909, -4.24107, 0.713791, 4.297983, 14.780758, 0.776775, 42.086843, -0.000294, 0.239535],
'N':[11.89378, 3.277479, 1.858092, 0.858927, 0.912985, -11.804902, 0.000158, 10.232723, 30.34469, 0.656065, 0.217287],
'O':[2.960427, 2.508818, 0.637853, 0.722838, 1.142756, 0.027014, 14.182259, 5.936858, 0.112726, 34.958481, 0.39024],
'F':[3.511943, 2.772244, 0.678385, 0.915159, 1.089261, 0.032557, 10.687859, 4.380466, 0.093982, 27.255203, 0.313066],
'Ne':[4.183749, 2.905726, 0.520513, 1.135641, 1.228065, 0.025576, 8.175457, 3.252536, 0.063295, 21.813909, 0.224952],
'Na':[4.910127, 3.081783, 1.262067, 1.098938, 0.560991, 0.079712, 3.281434, 9.119178, 0.102763, 132.013942, 0.405878],
'Mg':[4.708971, 1.194814, 1.558157, 1.170413, 3.239403, 0.126842, 4.875207, 108.506079, 0.111516, 48.292407, 1.928171],
'Al':[4.730796, 2.313951, 1.54198, 1.117564, 3.154754, 0.139509, 3.628931, 43.051166, 0.09596, 108.932389, 1.555918],
'Si':[5.275329, 3.191038, 1.511514, 1.356849, 2.519114, 0.145073, 2.631338, 33.730728, 0.081119, 86.28864, 1.170087],
'P':[1.950541, 4.14693, 1.49456, 1.522042, 5.729711, 0.155233, 0.908139, 27.044953, 0.07128, 67.52019, 1.981173],
'S':[6.372157, 5.154568, 1.473732, 1.635073, 1.209372, 0.154722, 1.514347, 22.092528, 0.061373, 55.445176, 0.646925],
'Cl':[1.446071, 6.870609, 6.151801, 1.750347, 0.634168, 0.146773, 0.052357, 1.193165, 18.343416, 46.398394, 0.401005],
'Ar':[7.188004, 6.638454, 0.45418, 1.929593, 1.523654, 0.265954, 0.956221, 15.339877, 15.339862, 39.043824, 0.062409],
'K':[8.163991, 7.146945, 1.07014, 0.877316, 1.486434, 0.253614, 12.816323, 0.808945, 210.327009, 39.597651, 0.052821],
'Ca':[8.593655, 1.477324, 1.436254, 1.182839, 7.113258, 0.196255, 10.460644, 0.041891, 81.390382, 169.847839, 0.688098],
'Sc':[1.476566, 1.487278, 1.600187, 9.177463, 7.09975, 0.157765, 53.131022, 0.035325, 137.319495, 9.098031, 0.602102],
'Ti':[9.818524, 1.522646, 1.703101, 1.768774, 7.082555, 0.102473, 8.001879, 0.029763, 39.885423, 120.158, 0.532405],
'V':[10.473575, 1.547881, 1.986381, 1.865616, 7.05625, 0.067744, 7.08194, 0.02604, 31.909672, 108.022844, 0.474882],
'Cr':[11.007069, 1.555477, 2.985293, 1.347855, 7.034779, 0.06551, 6.366281, 0.023987, 23.244838, 105.7745, 0.429369],
'Mn':[11.709542, 1.733414, 2.673141, 2.023368, 7.00318, -0.147293, 5.59712, 0.0178, 21.788419, 89.517915, 0.383054],
'Co':[12.91451, 2.481908, 3.466894, 2.106351, 6.960892, -0.936572, 4.507138, 0.009126, 16.43813, 76.987317, 0.314418],
'Ni':[13.521865, 6.947285, 3.866028, 2.1359, 4.284731, -2.762697, 4.077277, 0.286763, 14.622634, 71.966078, 0.004437],
'Cu':[14.014192, 4.784577, 5.056806, 1.457971, 6.932996, -3.254477, 3.73828, 0.003744, 13.034982, 72.554793, 0.265666],
'Zn':[14.741002, 6.907748, 4.642337, 2.191766, 38.424042, -36.915828, 3.388232, 0.243315, 11.903689, 63.31213, 0.000397],
'Ga':[15.758946, 6.841123, 4.121016, 2.714681, 2.395246, -0.847395, 3.121754, 0.226057, 12.482196, 66.203622, 0.007238],
'Ge':[16.540614, 1.5679, 3.727829, 3.345098, 6.785079, 0.018726, 2.866618, 0.012198, 13.432163, 58.866046, 0.210974],
'As':[17.025643, 4.503441, 3.715904, 3.9372, 6.790175, -2.984117, 2.597739, 0.003012, 14.272119, 50.437997, 0.193015],
'Se':[17.354071, 4.653248, 4.259489, 4.136455, 6.749163, -3.160982, 2.349787, 0.00255, 15.57946, 45.181201, 0.177432],
'Br':[17.55057, 5.411882, 3.93718, 3.880645, 6.707793, -2.492088, 2.119226, 16.557185, 0.002481, 42.164009, 0.162121],
'Kr':[17.655279, 6.848105, 4.171004, 3.44676, 6.6852, -2.810592, 1.908231, 16.606235, 0.001598, 39.917471, 0.146896],
'Rb':[8.123134, 2.138042, 6.761702, 1.156051, 17.679547, 1.139548, 15.142385, 33.542666, 0.129372, 224.132506, 1.713368],
'Sr':[17.730219, 9.795867, 6.099763, 2.620025, 0.600053, 1.140251, 1.56306, 14.310868, 0.120574, 135.771318, 0.120574],
'Zr':[17.859771, 10.911038, 5.821115, 3.512513, 0.746965, 1.124859, 1.310692, 12.319285, 0.104353, 91.777544, 0.104353],
'Nb':[17.958398, 12.063054, 5.007015, 3.287667, 1.531019, 1.123452, 1.21159, 12.246687, 0.098615, 75.011944, 0.098615],
'Mo':[6.236218, 17.987711, 12.973127, 3.451426, 0.210899, 1.10877, 0.09078, 1.10831, 11.46872, 66.684153, 0.09078],
'Tc':[17.840964, 3.428236, 1.373012, 12.947364, 6.335469, 1.074784, 1.005729, 41.901383, 119.320541, 9.781542, 0.083391],
'Ru':[6.271624, 17.906739, 14.123269, 3.746008, 0.908235, 1.043992, 0.07704, 0.928222, 9.555345, 35.860678, 123.552247],
'Rh':[6.216648, 17.919738, 3.854252, 0.840326, 15.173498, 0.995452, 0.070789, 0.856121, 33.889484, 121.686688, 9.029517],
'Pd':[6.121511, 4.784063, 16.631683, 4.318258, 13.246773, 0.883099, 0.062549, 0.784031, 8.751391, 34.489983, 0.784031],
'Ag':[6.073874, 17.155437, 4.173344, 0.852238, 17.988685, 0.756603, 0.055333, 7.896512, 28.443739, 110.376108, 0.716809],
'Cd':[6.080986, 18.019468, 4.018197, 1.30351, 17.974669, 0.603504, 0.04899, 7.273646, 29.119283, 95.831208, 0.661231],
'In':[6.196477, 18.816183, 4.050479, 1.638929, 17.962912, 0.333097, 0.042072, 6.695665, 31.009791, 103.28435, 0.610714],
'Sn':[19.325171, 6.281571, 4.498866, 1.856934, 17.917318, 0.119024, 6.118104, 0.036915, 32.529047, 95.037182, 0.565651],
'Sb':[5.394956, 6.54957, 19.650681, 1.82782, 17.867833, -0.290506, 33.326523, 0.030974, 5.564929, 87.130965, 0.523992],
'Te':[6.660302, 6.940756, 19.847015, 1.557175, 17.802427, -0.806668, 33.031656, 0.02575, 5.065547, 84.101613, 0.48766],
'Xe':[19.97892, 11.774945, 9.332182, 1.244749, 17.737501, -6.065902, 4.143356, 0.010142, 28.796199, 75.280688, 0.413616],
'Cs':[17.418675, 8.314444, 10.323193, 1.383834, 19.876252, -2.322802, 0.399828, 0.016872, 25.605828, 233.339674, 3.826915],
'Ba':[19.747344, 17.368476, 10.465718, 2.592602, 11.003653, -5.183497, 3.481823, 0.371224, 21.226641, 173.834271, 0.010719],
'La':[19.966018, 27.329654, 11.018425, 3.086696, 17.335454, -21.745489, 3.197408, 0.003446, 19.955492, 141.381979, 0.341817],
'Ce':[17.355121, 43.988498, 20.54665, 3.13067, 11.353665, -38.386017, 0.328369, 0.002047, 3.088196, 134.907661, 18.832961],
'Pr':[21.551311, 17.161729, 11.903859, 2.679103, 9.564197, -3.871068, 2.995675, 0.312491, 17.716705, 152.192827, 0.010468],
'Nd':[17.331244, 62.783923, 12.160097, 2.663483, 22.239951, -57.189844, 0.300269, 0.00132, 17.026001, 148.748986, 2.910268],
'Pm':[17.286388, 51.560161, 12.478557, 2.675515, 22.960947, -45.973681, 0.28662, 0.00155, 16.223755, 143.984513, 2.79648],
'Sm':[23.700364, 23.072215, 12.777782, 2.684217, 17.204366, -17.452166, 2.689539, 0.003491, 15.495437, 139.862475, 0.274536],
'Eu':[17.186195, 37.1568379, 13.103387, 2.707246, 24.419271, -31.586687, 0.261678, 0.001995, 14.78736, 134.816293, 2.581883],
'Gd':[24.898118, 17.104951, 13.222581, 3.266152, 48.995214, -43.505684, 2.435028, 0.246961, 13.996325, 110.863093, 0.001383],
'Tb':[25.910013, 32.344139, 13.765117, 2.751404, 17.064405, -26.85197, 2.373912, 0.002034, 13.481969, 125.836511, 0.236916],
'Dy':[26.671785, 88.687577, 14.065445, 2.768497, 17.067782, -83.279831, 2.282593, 0.000665, 12.92023, 121.937188, 0.225531],
'Ho':[27.15019, 16.999819, 14.059334, 3.386979, 46.546471, -41.165253, 2.16966, 0.215414, 12.213148, 100.506781, 0.001211],
'Er':[28.174886, 82.493269, 14.624002, 2.802756, 17.018515, -77.135223, 2.120995, 0.00064, 11.915256, 114.529936, 0.207519],
'Tm':[28.925894, 76.173796, 14.904704, 2.814812, 16.998117, -70.839813, 2.046203, 0.000656, 11.465375, 111.411979, 0.199376],
'Yb':[29.67676, 65.624068, 15.160854, 2.830288, 16.99785, -60.313812, 1.97763, 0.00072, 11.044622, 108.13915, 0.19211],
'Lu':[30.122865, 15.099346, 56.314899, 3.54098, 16.94373, -51.049417, 1.88309, 10.342764, 0.00078, 89.559248, 0.183849],
'Hf':[30.617033, 15.145351, 54.933548, 4.096253, 16.896157, -49.719838, 1.795613, 9.934469, 0.000739, 76.189707, 0.175914],
'Ta':[31.066358, 15.341823, 49.278296, 4.577665, 16.828321, -44.119025, 1.708732, 9.618455, 0.00076, 66.346202, 0.168002],
'Re':[31.888456, 16.117103, 42.390296, 5.211669, 16.767591, -37.412681, 1.549238, 9.233474, 0.000689, 54.516371, 0.152815],
'Os':[32.210298, 16.67844, 48.559907, 5.455839, 16.735532, -43.677954, 1.473531, 9.049695, 0.000519, 50.210201, 0.145771],
'Ir':[32.004437, 1.975454, 17.070104, 15.939454, 5.990003, 4.018893, 1.353767, 81.014172, 0.128093, 7.661196, 26.659403],
'Pt':[31.273891, 18.445441, 17.063745, 5.555933, 1.57527, 4.050394, 1.316992, 8.797154, 0.124741, 40.177994, 1.316997],
'Au':[16.777389, 19.317156, 32.979682, 5.595453, 10.576854, -6.279078, 0.122737, 8.62157, 1.256902, 38.008821, 0.000601],
'Hg':[16.839889, 20.023823, 28.428565, 5.881564, 4.714706, 4.076478, 0.115905, 8.256927, 1.19525, 39.247226, 1.19525],
'Tl':[16.630795, 19.386615, 32.80857, 1.747191, 6.356862, 4.066939, 0.110704, 7.181401, 1.11973, 90.660262, 26.014978],
'Pb':[16.419567, 32.738592, 6.530247, 2.342742, 19.916475, 4.049824, 0.105499, 1.055049, 25.02589, 80.906596, 6.664449],
'Bi':[16.282274, 32.725137, 6.678302, 2.69475, 20.576559, 4.040914, 0.10118, 1.002287, 25.714145, 77.05755, 6.291882],
'Po':[16.289164, 32.80717, 21.095164, 2.505901, 7.254589, 4.046556, 0.098121, 0.966265, 6.046622, 76.598071, 28.096128],
'At':[16.011461, 32.615549, 8.113899, 2.884082, 21.377867, 3.995684, 0.092639, 0.904416, 26.543256, 68.372961, 5.499512],
'Rn':[16.070228, 32.641105, 21.489659, 2.299218, 9.480184, 4.020977, 0.090437, 0.876409, 5.239687, 69.188477, 27.63264],
'Fr':[16.007386, 32.66383, 21.594351, 1.598497, 11.121192, 4.003472, 0.087031, 0.840187, 4.954467, 199.805805, 26.905106],
'Ra':[32.563691, 21.396671, 11.298093, 2.834688, 15.914965, 3.981773, 0.80198, 4.590666, 22.758973, 160.404392, 0.083544],
'Ac':[15.914053, 32.535042, 21.553976, 11.433394, 3.612409, 3.939212, 0.080511, 0.770669, 4.352206, 21.381622, 130.500748],
'Th':[15.784024, 32.454898, 21.849222, 4.239077, 11.736191, 3.922533, 0.077067, 0.735137, 4.097976, 109.464113, 20.512138],
'Pa':[32.740208, 21.973674, 12.957398, 3.683832, 15.744058, 3.886066, 0.709545, 4.050881, 19.231542, 117.255006, 0.07404],
'U':[15.679275, 32.824305, 13.660459, 3.687261, 22.279435, 3.854444, 0.071206, 0.681177, 18.236157, 112.50004, 3.930325],
'Np':[32.999899, 22.638076, 14.219973, 3.67295, 15.683245, 3.769391, 0.657086, 3.854918, 17.435474, 109.464485, 0.068033],
'Pu':[33.281176, 23.148545, 15.153755, 3.031492, 15.704215, 3.6642, 0.634999, 3.856168, 16.849736, 121.29204, 0.064857],
'Am':[33.435163, 23.657259, 15.576339, 3.027023, 15.7461, 3.54116, 0.612785, 3.792942, 16.195778, 117.757005, 0.061755],
'Cm':[15.804837, 33.4808, 24.150198, 3.655563, 15.499866, 3.39084, 0.058619, 0.59016, 3.67472, 100.736192, 15.408296],
'Bk':[15.889072, 33.625285, 24.71038, 3.707139, 15.839268, 3.213169, 0.055503, 0.569571, 3.615472, 97.694787, 14.754303],
'Cf':[33.794074, 25.467693, 16.048487, 3.657525, 16.008982, 3.005326, 0.550447, 3.581973, 14.357388, 96.064975, 0.05245]
}

'''
this dictionary tabulates the small nuclear Thomson term fNT for all elements up to Z=92
'''
fNT = {
'H':-0.00054423,'He':-0.00054817,'Li':-0.00071131,'Be':-0.00097394,'B':-0.0012687,'C':-0.0016442,'N':-0.0019191,'O':-0.0021944,
'F':-0.0023389,'Ne':-0.0027186,'Na':-0.0028873,'Mg':-0.0032502,'Al':-0.0034361,'Si':-0.0038284,'P':-0.003985,'S':-0.0043804,
'Cl':-0.0044718,'Ar':-0.0044493,'K':-0.0050651,'Ca':-0.0054748,'Sc':-0.0053814,'Ti':-0.0055454,'V':-0.0056967,'Cr':-0.006077,
'Mn':-0.0062409,'Fe':-0.0066403,'Co':-0.0067859,'Ni':-0.0073281,'Cu':-0.0072602,'Zn':-0.0075516,'Ga':-0.0075615,'Ge':-0.0077386,
'As':-0.0079737,'Se':-0.0080314,'Br':-0.0084102,'Kr':-0.008484,'Rb':-0.008787,'Sr':-0.0090407,'Y ':-0.0093851,'Zr':-0.0096221,
'Nb':-0.0099257,'Mo':-0.010086,'Tc':-0.01035,'Ru':-0.010508,'Rh':-0.010795,'Pd':-0.010908,'Ag':-0.011234,'Cd':-0.011244,
'In':-0.011471,'Sn':-0.011555,'Sb':-0.01172,'Te':-0.011625,' I':-0.012143,'Xe':-0.012184,'Cs':-0.012486,'Ba':-0.012527,
'La':-0.012831,'Ce':-0.01317,'Pr':-0.013552,'Nd':-0.013692,'Pm':-0.014078,'Sm':-0.014025,'Eu':-0.014328,'Gd':-0.014289,
'Tb':-0.014584,'Dy':-0.014705,'Ho':-0.014931,'Er':-0.015166,'Tm':-0.01546,'Yb':-0.015534,'Lu':-0.015805,'Hf':-0.015933,
'Ta':-0.016156,'W ':-0.01634,'Re':-0.016572,'Os':-0.016659,'Ir':-0.016921,'Pt':-0.017109,'Au':-0.017382,'Hg':-0.017503,
'Tl':-0.01761,'Pb':-0.017802,'Bi':-0.018084,'Po':-0.01852,'At':-0.018874,'Rn':-0.018276,'Fr':-0.01862,'Ra':-0.018795,
'Ac':-0.01914,'Th':-0.01915,'Pa':-0.019663,'U':-0.019507
}

'''
relativistic correction factor for in anomalous scattering for all elements upto Z=92
'''
frel = {
'H':0.0,'He':0.0,'Li':-0.0006,'Be':-0.0006,'B':-0.0012,'C':-0.0018,'N':-0.003,'O':-0.0042,
'F':-0.0054,'Ne':-0.0066,'Na':-0.0084,'Mg':-0.0108,'Al':-0.0126,'Si':-0.0156,'P':-0.018,'S':-0.021,
'Cl':-0.0246,'Ar':-0.0282,'K':-0.0318,'Ca':-0.036,'Sc':-0.0408,'Ti':-0.045,'V':-0.0504,'Cr':-0.0558,
'Mn':-0.0612,'Fe':-0.0678,'Co':-0.0738,'Ni':-0.081,'Cu':-0.0876,'Zn':-0.0954,'Ga':-0.1032,'Ge':-0.1116,
'As':-0.12,'Se':-0.129,'Br':-0.1386,'Kr':-0.1482,'Rb':-0.1584,'Sr':-0.1692,'Y ':-0.18,'Zr':-0.1914,
'Nb':-0.2028,'Mo':-0.2154,'Tc':-0.228,'Ru':-0.2406,'Rh':-0.2544,'Pd':-0.2682,'Ag':-0.2826,'Cd':-0.2976,
'In':-0.3126,'Sn':-0.3282,'Sb':-0.345,'Te':-0.3612,' I':-0.3786,'Xe':-0.396,'Cs':-0.414,'Ba':-0.4326,
'La':-0.4518,'Ce':-0.4716,'Pr':-0.4914,'Nd':-0.5124,'Pm':-0.5334,'Sm':-0.555,'Eu':-0.5772,'Gd':-0.6,
'Tb':-0.6234,'Dy':-0.6474,'Ho':-0.6714,'Er':-0.6966,'Tm':-0.7224,'Yb':-0.7488,'Lu':-0.7758,'Hf':-0.8028,
'Ta':-0.831,'W ':-0.8598,'Re':-0.8892,'Os':-0.9192,'Ir':-0.9498,'Pt':-0.9816,'Au':-1.0134,'Hg':-1.0458,
'Tl':-1.0794,'Pb':-1.1136,'Bi':-1.1484,'Po':-1.1838,'At':-1.2198,'Rn':-1.257,'Fr':-1.2942,'Ra':-1.3326,
'Ac':-1.3722,'Th':-1.4118,'Pa':-1.4526,'U':-1.494}

'''
this dictionary tabulates the terms, f1 and f2 for anomalous 
x-ray scatteringas a function of incident x-ray energy. they 
are calculated as :

(real part)      f' = f1 + frel - Z
(imaginary part) f" = f2

'''
# f1 = {
#     'H':,
#     'C':,
#     'N':,
#     'O':
# }

# f2 = {
#     'H':,
#     'C':,
#     'N':,
#     'O':
# }

'''
atomic weights for things like density computations 
(from NIST elemental data base)
'''
atom_weights = np.array([1.00794, 4.002602, 6.941, 9.012182, 10.811,
12.0107, 14.0067, 15.9994, 18.9984032, 20.1797,
22.98976928, 24.3050, 26.9815386, 28.0855, 30.973762,
32.065, 35.453, 39.948, 39.0983, 40.078,
44.955912, 47.867, 50.9415, 51.9961, 54.938045,
55.845, 58.933195, 58.6934, 63.546, 65.38,
69.723, 72.64, 74.92160, 78.96, 79.904,
83.798, 85.4678, 87.62, 88.90585, 91.224,
92.90638, 95.96, 98.9062, 101.07, 102.90550,
106.42, 107.8682, 112.411, 114.818, 118.710,
121.760, 127.60, 126.90447, 131.293, 132.9054519,
137.327, 138.90547, 140.116, 140.90765, 144.242,
145.0, 150.36, 151.964, 157.25, 158.92535,
162.500, 164.93032, 167.259, 168.93421, 173.054,
174.9668, 178.49, 180.94788, 183.84, 186.207,
190.23, 192.217, 195.084, 196.966569, 200.59,
204.3833, 207.2, 208.98040, 209.0, 210.0,
222.0, 223.0, 226.0, 227.0, 232.03806,
231.03588, 238.02891, 237.0, 244.0, 243.0,
247.0, 251.0, 252.0 ])

'''
dictionary of atomic numbers with element symbol as keys
used in I/O from cif file
'''
ptable = {'H':1, 'He':2,
'Li':3,  'Be':4, 'B':5,  'C':6,  'N':7,  'O':8,  'F':9, 'Ne':10 , 
'Na':11, 'Mg':12, 'Al':13, 'Si':14, 'P' :15 , 'S':16, 'Cl':17, 'Ar':18 ,
'K':19 , 'Ca':20, 'Sc':21, 'Ti':22, 'V' :23, 'Cr':24, 'Mn':25, 'Fe':26 ,
'Co':27, 'Ni':28, 'Cu':29, 'Zn':30, 'Ga':31, 'Ge':32, 'As':33, 'Se':34 ,
'Br':35, 'Kr':36, 'Rb':37, 'Sr':38, 'Y ':39, 'Zr':40, 'Nb':41, 'Mo':42 ,
'Tc':43, 'Ru':44, 'Rh':45, 'Pd':46, 'Ag':47, 'Cd':48, 'In':49, 'Sn':50 ,
'Sb':51, 'Te':52, ' I':53, 'Xe':54, 'Cs':55, 'Ba':56, 'La':57, 'Ce':58 ,
'Pr':59, 'Nd':60, 'Pm':61, 'Sm':62, 'Eu':63, 'Gd':64, 'Tb':65, 'Dy':66 ,
'Ho':67, 'Er':68, 'Tm':69, 'Yb':70, 'Lu':71, 'Hf':72, 'Ta':73, 'W ':74 ,
'Re':75, 'Os':76, 'Ir':77, 'Pt':78, 'Au':79, 'Hg':80, 'Tl':81, 'Pb':82 ,
'Bi':83, 'Po':84, 'At':85, 'Rn':86, 'Fr':87, 'Ra':88, 'Ac':89, 'Th':90 ,
'Pa':91, 'U' :92, 'Np':93, 'Pu':94, 'Am':95, 'Cm':96, 'Bk':97, 'Cf':98}

ptableinverse = {1:'H', 2:'He',
3:'Li' ,  4:'Be',   5:'B',   6:'C',  7:'N',  8:  'O',  9:'F',  10:'Ne' , 
11:'Na', 12:'Mg', 13:'Al', 14:'Si', 15: 'P', 16:'S' , 17:'Cl', 18:'Ar',
19:'K' , 20:'Ca', 21:'Sc', 22:'Ti', 23:'V' , 24:'Cr', 25:'Mn', 26:'Fe' ,
27:'Co', 28:'Ni', 29:'Cu', 30:'Zn', 31:'Ga', 32:'Ge', 33:'As', 34:'Se' ,
35:'Br', 36:'Kr', 37:'Rb', 38:'Sr', 39:'Y ', 40:'Zr', 41:'Nb', 42:'Mo' ,
43:'Tc', 44:'Ru', 45:'Rh', 46:'Pd', 47:'Ag', 48:'Cd', 49:'In', 50:'Sn' ,
51:'Sb', 52:'Te', 53:' I', 54:'Xe', 55:'Cs', 56:'Ba', 57:'La', 58:'Ce' ,
59:'Pr', 60:'Nd', 61:'Pm', 62:'Sm', 63:'Eu', 64:'Gd', 65:'Tb', 66:'Dy' ,
67:'Ho', 68:'Er', 69:'Tm', 70:'Yb', 71:'Lu', 72:'Hf', 73:'Ta', 74:'W ' ,
75:'Re', 76:'Os', 77:'Ir', 78:'Pt', 79:'Au', 80:'Hg', 81:'Tl', 82:'Pb' ,
83:'Bi', 84:'Po', 85:'At', 86:'Rn', 87:'Fr', 88:'Ra', 89:'Ac', 90:'Th' ,
91:'Pa', 92:'U' , 93:'Np', 94:'Pu', 95:'Am', 96:'Cm', 97:'Bk', 98:'Cf' 
}

'''
listing the symmorphic space groups
'''
sgnum_symmorphic = np.array([1,2,3,5,6,8,10,12,16,21,22,23,25,35,38,42,44,47, \
65,69,71,75,79,81,82,83,87,89,97,99,107,111,115, \
119,121,123,139,143,146,147,148,149,150,155,156, \
157,160,162,164,166,168,174,175,177,183,187,189, \
191,195,196,197,200,202,204,207,209,211,215,216, \
217,221,225,229])

''' this variable encodes all the generators (including translations) for all 230 space groups
    will be used to compute the full space group symmetry operators 
'''
SYM_GL= [
"000                                     ","100                                     ","01cOOO0                                 ",\
"01cODO0                                 ","02aDDOcOOO0                             ","01jOOO0                                 ",\
"01jOOD0                                 ","02aDDOjOOO0                             ","02aDDOjOOD0                             ",\
"11cOOO0                                 ","11cODO0                                 ","12aDDOcOOO0                             ",\
"11cOOD0                                 ","11cODD0                                 ","12aDDOcOOD0                             ",\
"02bOOOcOOO0                             ","02bOODcOOD0                             ","02bOOOcDDO0                             ",\
"02bDODcODD0                             ","03aDDObOODcOOD0                         ","03aDDObOOOcOOO0                         ",\
"04aODDaDODbOOOcOOO0                     ","03aDDDbOOOcOOO0                         ","03aDDDbDODcODD0                         ",\
"02bOOOjOOO0                             ","02bOODjOOD0                             ","02bOOOjOOD0                             ",\
"02bOOOjDOO0                             ","02bOODjDOO0                             ","02bOOOjODD0                             ",\
"02bDODjDOD0                             ","02bOOOjDDO0                             ","02bOODjDDO0                             ",\
"02bOOOjDDD0                             ","03aDDObOOOjOOO0                         ","03aDDObOODjOOD0                         ",\
"03aDDObOOOjOOD0                         ","03aODDbOOOjOOO0                         ","03aODDbOOOjODO0                         ",\
"03aODDbOOOjDOO0                         ","03aODDbOOOjDDO0                         ","04aODDaDODbOOOjOOO0                     ",\
"04aODDaDODbOOOjBBB0                     ","03aDDDbOOOjOOO0                         ","03aDDDbOOOjDDO0                         ",\
"03aDDDbOOOjDOO0                         ","12bOOOcOOO0                             ","03bOOOcOOOhDDD1BBB                      ",\
"12bOOOcOOD0                             ","03bOOOcOOOhDDO1BBO                      ","12bDOOcOOO0                             ",\
"12bDOOcDDD0                             ","12bDODcDOD0                             ","12bDOOcOOD0                             ",\
"12bOOOcDDO0                             ","12bDDOcODD0                             ","12bOODcODD0                             ",\
"12bOOOcDDD0                             ","03bOOOcDDOhDDO1BBO                      ","12bDDDcOOD0                             ",\
"12bDODcODD0                             ","12bDODcODO0                             ","13aDDObOODcOOD0                         ",\
"13aDDObODDcODD0                         ","13aDDObOOOcOOO0                         ","13aDDObOOOcOOD0                         ",\
"13aDDObODOcODO0                         ","04aDDObDDOcOOOhODD1OBB                  ","14aODDaDODbOOOcOOO0                     ",\
"05aODDaDODbOOOcOOOhBBB1ZZZ              ","13aDDDbOOOcOOO0                         ","13aDDDbOOOcDDO0                         ",\
"13aDDDbDODcODD0                         ","13aDDDbODOcODO0                         ","02bOOOgOOO0                             ",\
"02bOODgOOB0                             ","02bOOOgOOD0                             ","02bOODgOOF0                             ",\
"03aDDDbOOOgOOO0                         ","03aDDDbDDDgODB0                         ","02bOOOmOOO0                             ",\
"03aDDDbOOOmOOO0                         ","12bOOOgOOO0                             ","12bOOOgOOD0                             ",\
"03bOOOgDDOhDDO1YBO                      ","03bOOOgDDDhDDD1YYY                      ","13aDDDbOOOgOOO0                         ",\
"04aDDDbDDDgODBhODB1OYZ                  ","03bOOOgOOOcOOO0                         ","03bOOOgDDOcDDO0                         ",\
"03bOODgOOBcOOO0                         ","03bOODgDDBcDDB0                         ","03bOOOgOODcOOO0                         ",\
"03bOOOgDDDcDDD0                         ","03bOODgOOFcOOO0                         ","03bOODgDDFcDDF0                         ",\
"04aDDDbOOOgOOOcOOO0                     ","04aDDDbDDDgODBcDOF0                     ","03bOOOgOOOjOOO0                         ",\
"03bOOOgOOOjDDO0                         ","03bOOOgOODjOOD0                         ","03bOOOgDDDjDDD0                         ",\
"03bOOOgOOOjOOD0                         ","03bOOOgOOOjDDD0                         ","03bOOOgOODjOOO0                         ",\
"03bOOOgOODjDDO0                         ","04aDDDbOOOgOOOjOOO0                     ","04aDDDbOOOgOOOjOOD0                     ",\
"04aDDDbDDDgODBjOOO0                     ","04aDDDbDDDgODBjOOD0                     ","03bOOOmOOOcOOO0                         ",\
"03bOOOmOOOcOOD0                         ","03bOOOmOOOcDDO0                         ","03bOOOmOOOcDDD0                         ",\
"03bOOOmOOOjOOO0                         ","03bOOOmOOOjOOD0                         ","03bOOOmOOOjDDO0                         ",\
"03bOOOmOOOjDDD0                         ","04aDDDbOOOmOOOjOOO0                     ","04aDDDbOOOmOOOjOOD0                     ",\
"04aDDDbOOOmOOOcOOO0                     ","04aDDDbOOOmOOOcDOF0                     ","13bOOOgOOOcOOO0                         ",\
"13bOOOgOOOcOOD0                         ","04bOOOgOOOcOOOhDDO1YYO                  ","04bOOOgOOOcOOOhDDD1YYY                  ",\
"13bOOOgOOOcDDO0                         ","13bOOOgOOOcDDD0                         ","04bOOOgDDOcDDOhDDO1YBO                  ",\
"04bOOOgDDOcDDDhDDO1YBO                  ","13bOOOgOODcOOO0                         ","13bOOOgOODcOOD0                         ",\
"04bOOOgDDDcOODhDDD1YBY                  ","04bOOOgDDDcOOOhDDD1YBY                  ","13bOOOgOODcDDO0                         ",\
"13bOOOgDDDcDDD0                         ","04bOOOgDDDcDDDhDDD1YBY                  ","04bOOOgDDDcDDOhDDD1YBY                  ",\
"14aDDDbOOOgOOOcOOO0                     ","14aDDDbOOOgOOOcOOD0                     ","05aDDDbDDDgODBcDOFhODB1OBZ              ",\
"05aDDDbDDDgODBcDOBhODB1OBZ              ","01nOOO0                                 ","01nOOC0                                 ",\
"01nOOE0                                 ","02aECCnOOO0                             ","11nOOO0                                 ",\
"12aECCnOOO0                             ","02nOOOfOOO0                             ","02nOOOeOOO0                             ",\
"02nOOCfOOE0                             ","02nOOCeOOO0                             ","02nOOEfOOC0                             ",\
"02nOOEeOOO0                             ","03aECCnOOOeOOO0                         ","02nOOOkOOO0                             ",\
"02nOOOlOOO0                             ","02nOOOkOOD0                             ","02nOOOlOOD0                             ",\
"03aECCnOOOkOOO0                         ","03aECCnOOOkOOD0                         ","12nOOOfOOO0                             ",\
"12nOOOfOOD0                             ","12nOOOeOOO0                             ","12nOOOeOOD0                             ",\
"13aECCnOOOeOOO0                         ","13aECCnOOOeOOD0                         ","02nOOObOOO0                             ",\
"02nOOCbOOD0                             ","02nOOEbOOD0                             ","02nOOEbOOO0                             ",\
"02nOOCbOOO0                             ","02nOOObOOD0                             ","02nOOOiOOO0                             ",\
"12nOOObOOO0                             ","12nOOObOOD0                             ","03nOOObOOOeOOO0                         ",\
"03nOOCbOODeOOC0                         ","03nOOEbOODeOOE0                         ","03nOOEbOOOeOOE0                         ",\
"03nOOCbOOOeOOC0                         ","03nOOObOODeOOO0                         ","03nOOObOOOkOOO0                         ",\
"03nOOObOOOkOOD0                         ","03nOOObOODkOOD0                         ","03nOOObOODkOOO0                         ",\
"03nOOOiOOOkOOO0                         ","03nOOOiOODkOOD0                         ","03nOOOiOOOeOOO0                         ",\
"03nOOOiOODeOOO0                         ","13nOOObOOOeOOO0                         ","13nOOObOOOeOOD0                         ",\
"13nOOObOODeOOD0                         ","13nOOObOODeOOO0                         ","03bOOOcOOOdOOO0                         ",\
"05aODDaDODbOOOcOOOdOOO0                 ","04aDDDbOOOcOOOdOOO0                     ","03bDODcODDdOOO0                         ",\
"04aDDDbDODcODDdOOO0                     ","13bOOOcOOOdOOO0                         ","04bOOOcOOOdOOOhDDD1YYY                  ",\
"15aODDaDODbOOOcOOOdOOO0                 ","06aODDaDODbOOOcOOOdOOOhBBB1ZZZ          ","14aDDDbOOOcOOOdOOO0                     ",\
"13bDODcODDdOOO0                         ","14aDDDbDODcODDdOOO0                     ","04bOOOcOOOdOOOeOOO0                     ",\
"04bOOOcOOOdOOOeDDD0                     ","06aODDaDODbOOOcOOOdOOOeOOO0             ","06aODDaDODbODDcDDOdOOOeFBF0             ",\
"05aDDDbOOOcOOOdOOOeOOO0                 ","04bDODcODDdOOOeBFF0                     ","04bDODcODDdOOOeFBB0                     ",\
"05aDDDbDODcODDdOOOeFBB0                 ","04bOOOcOOOdOOOlOOO0                     ","06aODDaDODbOOOcOOOdOOOlOOO0             ",\
"05aDDDbOOOcOOOdOOOlOOO0                 ","04bOOOcOOOdOOOlDDD0                     ","06aODDaDODbOOOcOOOdOOOlDDD0             ",\
"05aDDDbDODcODDdOOOlBBB0                 ","14bOOOcOOOdOOOeOOO0                     ","05bOOOcOOOdOOOeOOOhDDD1YYY              ",\
"14bOOOcOOOdOOOeDDD0                     ","05bOOOcOOOdOOOeDDDhDDD1YYY              ","16aODDaDODbOOOcOOOdOOOeOOO0             ",\
"16aODDaDODbOOOcOOOdOOOeDDD0             ","07aODDaDODbODDcDDOdOOOeFBFhBBB1ZZZ      ","07aODDaDODbODDcDDOdOOOeFBFhFFF1XXX      ",\
"15aDDDbOOOcOOOdOOOeOOO0                 ","15aDDDbDODcODDdOOOeFBB0                 ","01dOOO0                                 ",\
"11dOOO0                                 ","02dOOOfOOO0                             ","02dOOOlOOO0                             ",\
"02dOOOlDDD0                             ","12dOOOfOOO0                             ","12dOOOfDDD0                             "]

'''
this table contains the screw axis and glide planes 
which is used in calculating the systemtaic absences.
organized as follows:

--> the key will be the space group number
--> first list has the glide plane in the 
    primary, secondary and tertiary direction
--> second list has screw axis in primary,secondary
and tertiary directions

obv. this table only has the non-symmorphic groups
taken from international table of crystallography vol A
'''
SYS_AB = {
 4:[['','',''],['','2_1','']],
 7:[['','c',''],['','','']],
 9:[['','c',''],['','','']],
 11:[['','',''],['','2_1','']],
 13:[['','c',''],['','','']],
 14:[['','c',''],['','2_1','']],
 15:[['','c',''],['','','']],
 17:[['','',''],['','','2_1']],
 18:[['','',''],['2_1','2_1','']],
 19:[['','',''],['2_1','2_1','2_1']],
 20:[['','',''],['','','2_1']],
 24:[['','',''],['2_1','2_1','2_1']],
 26:[['','c',''],['','','2_1']],
 27:[['c','c',''],['','','']],
 28:[['','a',''],['','','']],
 29:[['c','a',''],['','','2_1']],
 30:[['n','c',''],['','','']],
 31:[['','n',''],['','','2_1']],
 32:[['b','a',''],['','','']],
 33:[['n','a',''],['','','2_1']],
 34:[['n','n',''],['','','']],
 36:[['','c',''],['','','2_1']],
 37:[['c','c',''],['','','']],
 39:[['b','',''],['','','']],
 40:[['','a',''],['','','']],
 41:[['b','a',''],['','','']],
 43:[['d','d',''],['','','']],
 45:[['b','a',''],['','','']],
 46:[['','a',''],['','','']],
 48:[['n','n','n'],['','','']],
 49:[['c','c',''],['','','']],
 50:[['b','a','n'],['','','']],
 51:[['','','a'],['2_1','','']],
 52:[['n','n','a'],['','2_1','']],
 53:[['','n','a'],['','','2_1']],
 54:[['c','c','a'],['2_1','','']],
 55:[['b','a',''],['2_1','2_1','']],
 56:[['c','c','n'],['2_1','2_1','']],
 57:[['b','c',''],['','2_1','2_1']],
 58:[['n','n',''],['2_1','2_1','']],
 59:[['','','n'],['2_1','2_1','']],
 60:[['b','c','n'],['2_1','','2_1']],
 61:[['b','c','a'],['2_1','2_1','2_1']],
 62:[['n','','a'],['2_1','2_1','2_1']],
 63:[['','c',''],['','','2_1']],
 64:[['','c','a'],['','','2_1']],
 66:[['c','c',''],['','','']],
 67:[['','','a'],['','','']],
 68:[['c','c','a'],['','','']],
 70:[['d','d','d'],['','','']],
 72:[['b','a',''],['','','']],
 73:[['b','c','a'],['2_1','2_1','2_1']],
 74:[['','','a'],['2_1','2_1','2_1']],
 76:[['','',''],['4_1','','']],
 77:[['','',''],['4_2','','']],
 78:[['','',''],['4_3','','']],
 80:[['','',''],['4_1','','']],
 84:[['','',''],['4_2','','']],
 85:[['n','',''],['','','']],
 86:[['n','',''],['4_2','','']],
 88:[['a','',''],['4_1','','']],
 90:[['','',''],['','2_1','']],
 91:[['','',''],['4_1','','']],
 92:[['','',''],['4_1','2_1','']],
 93:[['','',''],['4_2','','']],
 94:[['','',''],['4_2','2_1','']],
 95:[['','',''],['4_3','','']],
 96:[['','',''],['4_3','2_1','']],
 98:[['','',''],['4_1','','']],
 100:[['','b',''],['','','']],
 101:[['','c',''],['4_2','','']],
 102:[['','n',''],['4_2','','']],
 103:[['','c','c'],['','','']],
 104:[['','n','c'],['','','']],
 105:[['','','c'],['4_2','','']],
 106:[['','b','c'],['4_2','','']],
 108:[['','c',''],['','','']],
 109:[['','','d'],['4_1','','']],
 110:[['','c','d'],['4_1','','']],
 112:[['','','c'],['','','']],
 113:[['','',''],['','2_1','']],
 114:[['','','c'],['','2_1','']],
 116:[['','c',''],['','','']],
 117:[['','b',''],['','','']],
 118:[['','n',''],['','','']],
 120:[['','c',''],['','','']],
 122:[['','','d'],['','','']],
 124:[['','c','c'],['','','']],
 125:[['n','b',''],['','','']],
 126:[['n','n','c'],['','','']],
 127:[['','b',''],['','2_1','']],
 128:[['','n','c'],['','2_1','']],
 129:[['n','',''],['','2_1','']],
 130:[['n','c','c'],['','2_1','']],
 131:[['','','c'],['4_2','','']],
 132:[['','c',''],['4_2','','']],
 133:[['n','b','c'],['4_2','','']],
 134:[['n','n',''],['4_2','','']],
 135:[['','b','c'],['4_2','2_1','']],
 136:[['','n',''],['4_2','2_1','']],
 137:[['n','','c'],['4_2','2_1','']],
 138:[['n','c',''],['4_2','2_1','']],
 140:[['','c',''],['','','']],
 141:[['a','','d'],['4_1','','']],
 142:[['a','c','d'],['4_1','','']],
 144:[['','',''],['3_1','','']],
 145:[['','',''],['3_2','','']],
 151:[['','',''],['3_1','','']],
 152:[['','',''],['3_1','','']],
 153:[['','',''],['3_2','','']],
 154:[['','',''],['3_2','','']],
 158:[['','c',''],['','','']],
 159:[['','','c'],['','','']],
 161:[['','c',''],['','','']],
 163:[['','','c'],['','','']],
 165:[['','c',''],['','','']],
 167:[['','c',''],['','','']],
 169:[['','',''],['6_1','','']],
 170:[['','',''],['6_5','','']],
 171:[['','',''],['6_2','','']],
 172:[['','',''],['6_4','','']],
 173:[['','',''],['6_3','','']],
 176:[['','',''],['6_3','','']],
 178:[['','',''],['6_1','','']],
 179:[['','',''],['6_5','','']],
 180:[['','',''],['6_2','','']],
 181:[['','',''],['6_4','','']],
 182:[['','',''],['6_3','','']],
 184:[['','c','c'],['','','']],
 185:[['','c',''],['6_3','','']],
 186:[['','','c'],['6_3','','']],
 188:[['','c',''],['','','']],
 190:[['','','c'],['','','']],
 192:[['','c','c'],['','','']],
 193:[['','c',''],['6_3','','']],
 194:[['','','c'],['6_3','','']],
 198:[['','',''],['2_1','','']],
 199:[['','',''],['2_1','','']],
 201:[['n','',''],['','','']],
 203:[['d','',''],['','','']],
 205:[['a','',''],['2_1','','']],
 206:[['a','',''],['2_1','','']],
 208:[['','',''],['4_2','','']],
 210:[['','',''],['4_1','','']],
 212:[['','',''],['4_3','','']],
 213:[['','',''],['4_1','','']],
 214:[['','',''],['4_1','','']],
 218:[['','','n'],['','','']],
 219:[['','','c'],['','','']],
 220:[['','','d'],['','','']],
 222:[['n','','n'],['','','']],
 223:[['','','n'],['4_2','','']],
 224:[['n','',''],['4_2','','']],
 226:[['','','c'],['','','']],
 227:[['d','',''],['4_1','','']],
 228:[['d','','c'],['4_1','','']],
 230:[['a','','d'],['4_1','','']]
}

'''
this dictionary contains the generators encoded in each letter of the generator string
the full symmetry is generated by the repeated action of the generator matrix
'''

''' rotational, inversions, mirrors etc. components
'''

SYM_GENERATORS = {}

# now start to fill them in
# identity 
SYM_GENERATORS['a'] = np.zeros([3,3])
SYM_GENERATORS['a'] = np.eye(3)

# 180@c
SYM_GENERATORS['b'] = np.zeros([3,3])
SYM_GENERATORS['b'][0,0] = -1.; SYM_GENERATORS['b'][1,1] = -1.; SYM_GENERATORS['b'][2,2] = 1.

# 180@b
SYM_GENERATORS['c'] = np.zeros([3,3])
SYM_GENERATORS['c'][0,0] = -1.; SYM_GENERATORS['c'][1,1] = 1.; SYM_GENERATORS['c'][2,2] = -1.

# 120@[111]
SYM_GENERATORS['d'] = np.zeros([3,3]) 
SYM_GENERATORS['d'][0,2] = 1.; SYM_GENERATORS['d'][1,0] = 1.; SYM_GENERATORS['d'][2,1] = 1.

#180@[110]
SYM_GENERATORS['e'] = np.zeros([3,3]) 
SYM_GENERATORS['e'][0,1] = 1.; SYM_GENERATORS['e'][1,0] = 1.; SYM_GENERATORS['e'][2,2] = -1.

#
SYM_GENERATORS['f'] = np.zeros([3,3])
SYM_GENERATORS['f'][0,1] = -1.; SYM_GENERATORS['f'][1,0] = -1.; SYM_GENERATORS['f'][2,2] = -1.

#
SYM_GENERATORS['g'] = np.zeros([3,3])
SYM_GENERATORS['g'][0,1] = -1.; SYM_GENERATORS['g'][1,0] = 1.; SYM_GENERATORS['g'][2,2] = 1.

# inversion
SYM_GENERATORS['h'] = np.zeros([3,3])
SYM_GENERATORS['h'] = -np.eye(3)

# c-mirror
SYM_GENERATORS['i'] = np.zeros([3,3])
SYM_GENERATORS['i'][0,0] = 1.; SYM_GENERATORS['i'][1,1] = 1.; SYM_GENERATORS['i'][2,2] = -1.

# b-mirror
SYM_GENERATORS['j'] = np.zeros([3,3])
SYM_GENERATORS['j'][0,0] = 1.; SYM_GENERATORS['j'][1,1] = -1.; SYM_GENERATORS['j'][2,2] = 1.

# 90@[001]
SYM_GENERATORS['k'] = np.zeros([3,3])
SYM_GENERATORS['k'][0,1] = -1.; SYM_GENERATORS['k'][1,0] = -1.; SYM_GENERATORS['k'][2,2] = 1.

#
SYM_GENERATORS['l'] = np.zeros([3,3])
SYM_GENERATORS['l'][0,1] = 1.; SYM_GENERATORS['l'][1,0] = 1.; SYM_GENERATORS['l'][2,2] = 1.

#
SYM_GENERATORS['m'] = np.zeros([3,3])
SYM_GENERATORS['m'][0,1] = 1.; SYM_GENERATORS['m'][1,0] = -1.; SYM_GENERATORS['m'][2,2] = -1. 

#
SYM_GENERATORS['n'] = np.zeros([3,3])
SYM_GENERATORS['n'][0,1] = -1.; SYM_GENERATORS['n'][1,0] = 1.; SYM_GENERATORS['n'][1,1] = -1.; SYM_GENERATORS['n'][2,2] = 1.

''' translation components
'''
SYM_GENERATORS['A'] = 1./6.
SYM_GENERATORS['B'] = 1./4.
SYM_GENERATORS['C'] = 1./3.
SYM_GENERATORS['D'] = 1./2.
SYM_GENERATORS['E'] = 2./3.
SYM_GENERATORS['F'] = 3./4.
SYM_GENERATORS['G'] = 5./6.
SYM_GENERATORS['O'] = 0.
SYM_GENERATORS['X'] = -3./8.
SYM_GENERATORS['Y'] = -1./4.
SYM_GENERATORS['Z'] = -1./8.